# Primero vamos a eliminar los labels en caso de que haya un conflicto:
# Quitar labels de cada base de datos individualmente
ecv_2019 <- haven::zap_labels(ecv_2019)
ecv_2020 <- haven::zap_labels(ecv_2020)
ecv_2021 <- haven::zap_labels(ecv_2021)
ecv_2022 <- haven::zap_labels(ecv_2022)
View(ecv_2019)
View(ecv_2020)
ecv_2019 <- haven::zap_labels(ecv_2019)
ecv_2020 <- haven::zap_labels(ecv_2020)
ecv_2021 <- haven::zap_labels(ecv_2021)
ecv_2022 <- haven::zap_labels(ecv_2022)
View(ecv_2019)
View(ecv_2020)
View(ecv_2021)
View(ecv_2022)
ecv_2020 <- haven::zap_labels(ecv_2020)
ecv_2019_2022 <- bind_rows(ecv_2019, ecv_2020, ecv_2021, ecv_2022)
View(ecv_2019_2022)
View(ecv_2019)
# 2019
main_2019 <- read_dta("/Users/daniel/Documents/GitHub/Ninez-YA/02_RAW-Data/ECV/main_2019.dta")
integral_2019 <- read_dta("/Users/daniel/Documents/GitHub/Ninez-YA/02_RAW-Data/ECV/integral_2019.dta")
# 2020
main_2020 <- read_dta("/Users/daniel/Documents/GitHub/Ninez-YA/02_RAW-Data/ECV/main_2020.dta")
integral_2020 <- read_dta("/Users/daniel/Documents/GitHub/Ninez-YA/02_RAW-Data/ECV/integral_2020.dta")
# 2021
main_2021 <- read_dta("/Users/daniel/Documents/GitHub/Ninez-YA/02_RAW-Data/ECV/main_2021.dta")
integral_2021 <- read_dta("/Users/daniel/Documents/GitHub/Ninez-YA/02_RAW-Data/ECV/integral_2021.dta")
# 2021
main_2022 <- read_dta("/Users/daniel/Documents/GitHub/Ninez-YA/02_RAW-Data/ECV/main_2022.dta")
integral_2022 <- read_dta("/Users/daniel/Documents/GitHub/Ninez-YA/02_RAW-Data/ECV/integral_2022.dta")
colnames(integral_2022)
#===============================================
# Vamos a hacer el Join entre main e integral
#==============================================
ecv_2019 <- integral_2019 %>%
select(1:4, 'FEX_C', 'P779S5') %>%  # Selecciona las primeras 4 columnas de `integral_2019`
left_join(
main_2019 %>% select(DIRECTORIO, P1_DEPARTAMENTO),  # Selecciona `DIRECTORIO` y `P1_DEPARTAMENTO` de `main_2019`
by = "DIRECTORIO"  # Realiza la unión usando `DIRECTORIO`
)
View(ecv_2019)
ecv_2020 <- integral_2020 %>%
select(1:5, 'P779S5') %>%  # Selecciona las primeras 5 columnas de `integral_2019`
left_join(
main_2020 %>% select(DIRECTORIO, P1_DEPARTAMENTO),  # Selecciona `DIRECTORIO` y `P1_DEPARTAMENTO` de `main_2019`
by = "DIRECTORIO"  # Realiza la unión usando `DIRECTORIO`
)
View(ecv_2020)
ecv_2021 <- integral_2021 %>%
select(1:5, 'p779s5') %>%  # Selecciona las primeras 5 columnas de `integral_2021`
left_join(
main_2021 %>%
select(directorio, p1_departamento),  # Selecciona `directorio` y `p1_departamento` de `main_2021`
by = "directorio"  # Realiza la unión usando `directorio`
) %>%
rename(DIRECTORIO = directorio, P1_DEPARTAMENTO = p1_departamento, FEX_C = fex_c, P779S5 = p779s5)  # Renombra las columnas después de la unión
ecv_2022 <- integral_2022 %>%
select(1:5, 'P779S5') %>%  # Selecciona las primeras 5 columnas de `integral_2019`
left_join(
main_2022 %>% select(DIRECTORIO, P1_DEPARTAMENTO),  # Selecciona `DIRECTORIO` y `P1_DEPARTAMENTO` de `main_2019`
by = "DIRECTORIO"  # Realiza la unión usando `DIRECTORIO`
)
ecv_2019 <- ecv_2019 %>%
group_by(P1_DEPARTAMENTO, P779S5) %>%  # Agrupar por coddepto y categoría de P779S5S5
summarise(frecuencia_ponderada = sum(FEX_C, na.rm = TRUE)) %>%  # Calcular la suma ponderada
mutate(porcentaje = frecuencia_ponderada / sum(frecuencia_ponderada) * 100, # Calcular el porcentaje
anno = 2019) %>%
ungroup() %>%
mutate(P779S5 = replace_na(P779S5, 0))  # Reemplazar NA con 0
ecv_2020 <- ecv_2020 %>%
group_by(P1_DEPARTAMENTO, P779S5) %>%  # Agrupar por coddepto y categoría de P779S5S5
summarise(frecuencia_ponderada = sum(FEX_C, na.rm = TRUE)) %>%  # Calcular la suma ponderada
mutate(porcentaje = frecuencia_ponderada / sum(frecuencia_ponderada) * 100, # Calcular el porcentaje
anno = 2020) %>%
ungroup() %>%
mutate(P779S5 = replace_na(P779S5, 0))  # Reemplazar NA con 0
ecv_2021 <- ecv_2021 %>%
group_by(P1_DEPARTAMENTO, P779S5) %>%  # Agrupar por coddepto y categoría de P779S5S5
summarise(frecuencia_ponderada = sum(FEX_C, na.rm = TRUE)) %>%  # Calcular la suma ponderada
mutate(porcentaje = frecuencia_ponderada / sum(frecuencia_ponderada) * 100, # Calcular el porcentaje
anno = 2021) %>%
ungroup() %>%
mutate(P779S5 = replace_na(P779S5, 0))  # Reemplazar NA con 0
ecv_2022 <- ecv_2022 %>%
group_by(P1_DEPARTAMENTO, P779S5) %>%  # Agrupar por coddepto y categoría de P779S5S5
summarise(frecuencia_ponderada = sum(FEX_C, na.rm = TRUE)) %>%  # Calcular la suma ponderada
mutate(porcentaje = frecuencia_ponderada / sum(frecuencia_ponderada) * 100, # Calcular el porcentaje
anno = 2022) %>%
ungroup() %>%
mutate(P779S5 = replace_na(P779S5, 0))  # Reemplazar NA con 0
# Vamos a agrupar estos años
# Primero vamos a eliminar los labels en caso de que haya un conflicto:
# Quitar labels de cada base de datos individualmente
ecv_2019 <- haven::zap_labels(ecv_2019)
ecv_2020 <- haven::zap_labels(ecv_2020)
ecv_2021 <- haven::zap_labels(ecv_2021)
ecv_2022 <- haven::zap_labels(ecv_2022)
# Hacemos el Append de las Bases de Datos
ecv_2019_2022 <- bind_rows(ecv_2019, ecv_2020, ecv_2021, ecv_2022)
# Ajustamos el nombre de la variable codmpio por coddepto, ya que esta base de datos
# tiene un nivel de desagregación departamental.
ecv_2019_2022 <- ecv_2019_2022 %>% rename(coddepto = P1_DEPARTAMENTO)
# Limpiamos un poco el envioronment
rm(ecv_2019, ecv_2020, ecv_2021, ecv_2022, integral_2019, integral_2020, integral_2021, integral_2022, main_2019,
main_2020, main_2021, main_2022)
View(ecv_2019_2022)
# ==================================
#  ECV - 2023 *Tiene Otra estructura
# ==================================
main_2023 <- read_dta("/Users/daniel/Documents/GitHub/Ninez-YA/02_RAW-Data/ECV/muestral_2023.dta")
integral_2023 <- read_dta("/Users/daniel/Documents/GitHub/Ninez-YA/02_RAW-Data/ECV/integral_2023.dta")
# En este paso vamos a delimitar la Base de Datos, además vamos a eliminar los duplicados, en este caso los duplicados  y hacer el join en una sola línea
ecv_2023 <- integral_2023 %>%
select(1:5, 'P779S5') %>%  # Selecciona las primeras 5 columnas
left_join(
main_2023 %>% distinct(DIRECTORIO, .keep_all = TRUE),  # Elimina duplicados en `main_2023`
by = "DIRECTORIO"
) %>%
mutate(codmpio = as.numeric(substr(MPIO, 1, ifelse(nchar(MPIO) >= 2, 2, 1))))  %>% # Crea codmpio tomando los primeros caracteres de MPIO
select(5,'P779S5',17)
# Calcular el porcentaje ponderado de cada categoría de 'P779S5 para cada codmpio
ecv_2023 <- ecv_2023  %>%
group_by(codmpio, 'P779S5') %>%  # Agrupar por codmpio y categoría de 'P779S5
summarise(frecuencia_ponderada = sum(FEX_C.x, na.rm = TRUE)) %>%  # Calcular la suma ponderada
mutate(porcentaje = frecuencia_ponderada / sum(frecuencia_ponderada) * 100, # Calcular el porcentaje
anno = 2023) %>%
ungroup()  # Desagrupar el resultado final
# Renombramos codmpio a coddepto,la razón, acá tenemos desagregación departamental no municipal.
ecv_2023 <- ecv_2023 %>%
rename(coddepto = codmpio)
# Limpiamos el enviornment
rm(main_2023, integral_2023)
# ==============================================================================
# Hacemos el Append Final de las Bases de Datos
# ==============================================================================
# Convertir coddepto a character en ambas bases de datos
ecv_2019_2022$coddepto <- as.character(ecv_2019_2022$coddepto)
ecv_2023$coddepto <- as.character(ecv_2023$coddepto)
# Unir las bases de datos
ecv_P779S5 <- bind_rows(ecv_2019_2022, ecv_2023)
# Definimos la Base de datos
ecv_P779S5 <- ecv_P779S5 %>% select(c(1,5,2,4))
# Exportamos
write.xlsx(ecv_P779S5, "/Users/daniel/Documents/GitHub/Ninez-YA/03_Process/YA_5.2.xlsx", col_names = TRUE)
write.xlsx(ecv_P779S5, "/Users/daniel/Documents/GitHub/Ninez-YA/03_Process/YA_5.2.xlsx", col_names = TRUE)
clear
SRPA_2 <- read.csv("~/Documents/GitHub/Ninez-YA/02_RAW-Data/SRPA_2.csv")
View(SRPA_2)
SRPA_1 <- read.csv("~/Documents/GitHub/Ninez-YA/02_RAW-Data/SRPA_1.csv")
View(SRPA_1)
View(SRPA_2)
library(readxl)
library(data.table)
library(dplyr)
library(openxlsx)
library(stringr)
library(tidyr)
# ================================================
# SRPA_3
# ================================================
SRPA_3 <- read.csv("~/Documents/GitHub/Ninez-YA/02_RAW-Data/SRPA_3.csv")
denominador_ICBF <- read.csv("~/Documents/GitHub/Ninez-YA/03_Process/ICBF_denominador_General.csv")
# ================================================
# Ajustamos algunos nombres
# ================================================
# Debemos Cambiar la estructura de wide a long
# Aplicamos el melt
setDT(SRPA_3)
SRPA_3 <- melt(SRPA_3, id.vars = c("codmpio", "Departamento"), variable.name = "anno", value.name = "valor")
# Quitamos la "X" en la columna 'anno'
SRPA_3[, anno := gsub("^X", "", anno)]
# Renombramos Variables
SRPA_3  <- SRPA_3  %>%
rename(SRPA_3 = valor)
# Filtramos las Variables
SRPA_3 <- SRPA_3 %>%
select(codmpio, anno, SRPA_3)
# Nos Aseguramos que SRPA_3 no sea un string
SRPA_3 <- SRPA_3 %>%
mutate(SRPA_3 = as.numeric(SRPA_3))
# Agrupamos SRPA_2 por codmpio y anno.
SRPA_3 <- SRPA_3 %>%
group_by(codmpio, anno) %>%
summarise(SRPA_3 = sum(SRPA_3, na.rm = TRUE))
###############################################################################
# Convertir 'anno' en ambas bases de datos a integer
denominador_ICBF <- denominador_ICBF %>%
mutate(anno = as.integer(anno))
SRPA_3 <- SRPA_3 %>%
mutate(anno = as.integer(anno))
# Hacer un join entre ambas bases de datos por 'codmpio' y 'anno'
merged_data <- denominador_ICBF %>%
left_join(SRPA_3, by = c("codmpio", "anno"))
View(merged_data)
SRPA_3 <- merged_data %>%
mutate(tasa = (SRPA_3 / procesos) * 100) %>%
rename(coddepto = codmpio )
View(SRPA_3)
library(readxl)
library(data.table)
library(dplyr)
library(openxlsx)
library(stringr)
library(tidyr)
SRPA_4 <- read.csv("~/Documents/GitHub/Ninez-YA/02_RAW-Data/SRPA_4.csv")
denominador_ICBF <- read.csv("/Documents/GitHub/Ninez-YA/03_Process/ICBF_denominador_General.csv")
# Debemos Cambiar la estructura de wide a long
# Convertir a data.table *Melt solo funciona con Data.Table
setDT(SRPA_4)
# Aplicamos el melt
SRPA_4 <- melt(SRPA_4, id.vars = c("codmpio", "Departamento"), variable.name = "anno", value.name = "valor")
# Quitamos la "X" en la columna 'anno'
SRPA_4[, anno := gsub("^X", "", anno)]
# Renombramos Variables
SRPA_4  <- SRPA_4  %>%
rename(
SRPA_4 = valor)
# Filtramos las Variables
SRPA_4 <- SRPA_4 %>%
select(codmpio, anno, SRPA_4)
# Nos Aseguramos que SRPA_3 no sea un string
SRPA_4 <- SRPA_4 %>%
mutate(SRPA_4 = as.numeric(SRPA_4))
# Agrupamos SRPA_2 por codmpio y anno.
denominador_ICBF <- read.csv("/Documents/GitHub/Ninez-YA/03_Process/ICBF_denominador_General.csv")
denominador_ICBF <- read.csv("/Documents/GitHub/Ninez-YA/03_Process/ICBF_denominador_General.csv")
denominador_ICBF <- read.csv("~/Documents/GitHub/Ninez-YA/03_Process/ICBF_denominador_General.csv")
View(SRPA_4)
# ================================================
# Ajustamos el Nombre de las Variable de kla Base SRPA_3
# ================================================
# Debemos Cambiar la estructura de wide a long
# Convertir a data.table *Melt solo funciona con Data.Table
setDT(SRPA_4)
# Aplicamos el melt
SRPA_4 <- melt(SRPA_4, id.vars = c("codmpio", "Departamento"), variable.name = "anno", value.name = "valor")
# ================================================
# Ajustamos el Nombre de las Variable de kla Base SRPA_3
# ================================================
# Debemos Cambiar la estructura de wide a long
# Convertir a data.table *Melt solo funciona con Data.Table
setDT(SRPA_4)
# Aplicamos el melt
SRPA_4 <- melt(SRPA_4, id.vars = c("codmpio", "Departamento"), variable.name = "anno", value.name = "valor")
SRPA_4 <- read.csv("~/Documents/GitHub/Ninez-YA/02_RAW-Data/SRPA_4.csv")
denominador_ICBF <- read.csv("~/Documents/GitHub/Ninez-YA/03_Process/ICBF_denominador_General.csv")
setDT(SRPA_4)
# Aplicamos el melt
SRPA_4 <- melt(SRPA_4, id.vars = c("codmpio", "Departamento"), variable.name = "anno", value.name = "valor")
# Quitamos la "X" en la columna 'anno'
SRPA_4[, anno := gsub("^X", "", anno)]
View(SRPA_4)
# Renombramos Variables
SRPA_4  <- SRPA_4  %>%
rename(
SRPA_4 = valor)
View(SRPA_4)
# Filtramos las Variables
SRPA_4 <- SRPA_4 %>%
select(codmpio, anno, SRPA_4)
# Nos Aseguramos que SRPA_4 no sea un string
SRPA_4 <- SRPA_4 %>%
mutate(SRPA_4 = as.numeric(SRPA_4))
SRPA_4 <- SRPA_4 %>%
group_by(codmpio, anno) %>%
summarise(SRPA_4 = sum(SRPA_4, na.rm = TRUE))
denominador_ICBF <- denominador_ICBF %>%
mutate(anno = as.integer(anno))
SRPA_4 <- SRPA_4 %>%
mutate(anno = as.integer(anno))
merged_data <- denominador_ICBF %>%
left_join(SRPA_4, by = c("codmpio", "anno"))
View(SRPA_4)
View(merged_data)
View(denominador_ICBF)
View(merged_data)
SRPA_4 <- merged_data %>%
mutate(tasa = (SRPA_4 / procesos) * 100)%>%
rename(coddepto = codmpio )
write.xlsx(SRPA_4, "/Users/daniel/Documents/GitHub/Ninez-YA/03_Process/YA_9.4.xlsx", colNames = TRUE)
# Fin del Código
# ================================================
# SRPA_3
# ================================================
SRPA_3 <- read.csv("~/Documents/GitHub/Ninez-YA/02_RAW-Data/SRPA_3.csv")
denominador_ICBF <- read.csv("~/Documents/GitHub/Ninez-YA/03_Process/ICBF_denominador_General.csv")
# ================================================
# Ajustamos algunos nombres
# ================================================
# Debemos Cambiar la estructura de wide a long
# Aplicamos el melt
setDT(SRPA_3)
SRPA_3 <- melt(SRPA_3, id.vars = c("codmpio", "Departamento"), variable.name = "anno", value.name = "valor")
# Quitamos la "X" en la columna 'anno'
SRPA_3[, anno := gsub("^X", "", anno)]
# Renombramos Variables
SRPA_3  <- SRPA_3  %>%
rename(SRPA_3 = valor)
# Filtramos las Variables
SRPA_3 <- SRPA_3 %>%
select(codmpio, anno, SRPA_3)
# Nos Aseguramos que SRPA_3 no sea un string
SRPA_3 <- SRPA_3 %>%
mutate(SRPA_3 = as.numeric(SRPA_3))
# Agrupamos SRPA_2 por codmpio y anno.
SRPA_3 <- SRPA_3 %>%
group_by(codmpio, anno) %>%
summarise(SRPA_3 = sum(SRPA_3, na.rm = TRUE))
###############################################################################
# Convertir 'anno' en ambas bases de datos a integer
denominador_ICBF <- denominador_ICBF %>%
mutate(anno = as.integer(anno))
SRPA_3 <- SRPA_3 %>%
mutate(anno = as.integer(anno))
# Hacer un join entre ambas bases de datos por 'codmpio' y 'anno'
merged_data <- denominador_ICBF %>%
left_join(SRPA_3, by = c("codmpio", "anno"))
# Calcular la tasa o porcentaje SRPA_1 / procesos
SRPA_3 <- merged_data %>%
mutate(tasa = (SRPA_3 / procesos) * 100) %>%
rename(coddepto = codmpio )
# ================================================
# Exportar el resultado a un archivo Excel
# ================================================
write.xlsx(SRPA_3, "/Users/daniel/Documents/GitHub/Ninez-YA/03_Process/YA_9.3.xlsx", colNames = TRUE)
# Fin del Código
library(tidyr)
library(dplyr)
library(openxlsx)
library(readxl)
library(stringr)
library(lubridate) # Nos permite manejar fechas.
educ_inicial <-  read.csv("/Users/daniel/Documents/GitHub/Ninez-YA/02_RAW-Data/Educacion_Inicial.csv")
educ_inicial <- educ_inicial %>%
mutate(FECHA = dmy(FECHA),   # Convertir la fecha de texto a formato Date
Año = year(FECHA))     # Extraemos el año y ya no tenemos día ni mes
# Eliminamos Variables que no Necesitamos
educ_inicial <- educ_inicial %>%
select(-1:-5,-7) # Acá Eliminamos las Primeras 5 columnas y la columna número 7
educ_inicial  <- educ_inicial  %>%
rename(anno = Año)
educ_inicial  <- educ_inicial  %>%
rename(codmpio = COD_DANE_MUNICIPIO)
YA_2.5 <-select(educ_inicial, c(1,6,5)) %>%
rename(porcentaje_marco_integral = INDICADOR.4..CONCURRENCIA.DE.ATENCIONES)
# Este indicador ya se encuentra calculado, tenemos un issue y es que trae un % incorporado, eso vamos a limpiarlo.
YA_2.5 <- YA_2.5 %>% mutate(porcentaje_marco_integral = as.numeric(sub("%", "", porcentaje_marco_integral)))
View(YA_2.5)
library(tidyr)
library(dplyr)
library(openxlsx)
library(readxl)
library(stringr)
library(lubridate) # Nos permite manejar fechas.
# Carga
educ_inicial <-  read.csv("/Users/daniel/Documents/GitHub/Ninez-YA/02_RAW-Data/preescolar_basica.csv")
# Limpiamos l
View(educ_inicial)
View(educ_inicial)
educ_inicial <-  read.csv("/Users/daniel/Documents/GitHub/Ninez-YA/02_RAW-Data/MEN_ESTADISTICAS.csv")
View(educ_inicial)
source("~/.active-rstudio-document")
YA_1.10 <- read.xlsx("/Users/daniel/Documents/GitHub/Ninez-YA/02_RAW-Data/tipo_nacimiento.xlsx" )
nacidos_vivos <- read.xlsx("/Users/daniel/Documents/GitHub/Ninez-YA/03_Process/VF_nacidos_vivos.xlsx")
View(nacidos_vivos)
View(YA_1.10)
YA_1.10$codmpio <- str_replace(YA_1.10$codmpio, " - .*", "")
YA_1.10 <- read.xlsx("/Users/daniel/Documents/GitHub/Ninez-YA/02_RAW-Data/tipo_nacimiento.xlsx" )
nacidos_vivos <- read.xlsx("/Users/daniel/Documents/GitHub/Ninez-YA/03_Process/VF_nacidos_vivos.xlsx")
YA_1.10$codmpio <- str_replace(YA_1.10$codmpio, " - .*", "")
View(YA_1.10)
YA_1.10 <- YA_1.10 %>%
pivot_longer(
cols = starts_with("20"), # Seleccionamos las columnas que empiezan con "20" (años desde 2000)
names_to = "anno", # Nuevo nombre de columna para los nombres de las columnas originales
values_to = "partos_atendidos_calificado" # Nuevo nombre de columna para los valores
)
YA_1.10 <- read.xlsx("/Users/daniel/Documents/GitHub/Ninez-YA/02_RAW-Data/tipo_nacimiento.xlsx" )
nacidos_vivos <- read.xlsx("/Users/daniel/Documents/GitHub/Ninez-YA/03_Process/VF_nacidos_vivos.xlsx")
YA_1.10$codmpio <- str_replace(YA_1.10$codmpio, " - .*", "")
# Organ
YA_1.10 <- YA_1.10 %>%
pivot_longer(
cols = starts_with("20"), # Seleccionamos las columnas que empiezan con "20" (años desde 2000)
names_to = "anno", # Nuevo nombre de columna para los nombres de las columnas originales
values_to = "partos_atendidos_calificado" # Nuevo nombre de columna para los valores
)
# ==
View(nacidos_vivos)
class(YA_1.10$codmpio)
class(YA_1.10$anno)
class(YA_1.10partos_atendidos_calificado) # Podemos hacerlo paara cada una de las variables
View(YA_1.10)
class(YA_1.10$codmpio)
class(YA_1.10$anno)
class(YA_1.10$partos_atendidos_calificado) # Podemos hacerlo paara cada una de las variables
class(nacidos_vivos$codmpio)
class(nacidos_vivos$anno)
class(nacidos_vivos$nacidos_vivos)
# Cambiamos de String a Numeric
# Cambiamos de String a Numeric
YA_1.10 <- YA_1.10 %>%
mutate(codmpio = as.numeric(codmpio))
YA_1.10 <- YA_1.10 %>%
mutate(anno = as.numeric(anno))
nacidos_vivos <- nacidos_vivos %>%
mutate(codmpio = as.numeric(codmpio))
nacidos_vivos<- nacidos_vivos %>%
mutate(anno = as.numeric(anno))
YA_1.10 <- inner_join(nacidos_vivos, YA_1.10, by = c("codmpio","anno"))
YA_1.10 <- YA_1.10 %>%
mutate(porcentaje_nacidos_vivos_personal_calificado = (partos_atendidos_calificado /nacidos_vivos)* 100) # Esto es un porcentaje
library(tidyr)
library(dplyr)
library(openxlsx)
library(readxl)
library(stringr)
# Vamos a Cargar las Bases de Datos
YA_1.10 <- read.xlsx("/Users/daniel/Documents/GitHub/Ninez-YA/02_RAW-Data/tipo_nacimiento.xlsx" )
nacidos_vivos <- read.xlsx("/Users/daniel/Documents/GitHub/Ninez-YA/03_Process/VF_nacidos_vivos.xlsx")
# Vamos a limpiar el numerador
# Separamos el CODMPIO del Nombre del Municipio
YA_1.10$codmpio <- str_replace(YA_1.10$codmpio, " - .*", "")
# Organizamos la Base de Datos, estos están en Wide, de manera que
# los vamos a convertir a Longer.
YA_1.10 <- YA_1.10 %>%
pivot_longer(
cols = starts_with("20"), # Seleccionamos las columnas que empiezan con "20" (años desde 2000)
names_to = "anno", # Nuevo nombre de columna para los nombres de las columnas originales
values_to = "partos_atendidos_calificado" # Nuevo nombre de columna para los valores
)
# ====================================================
# Sección: Merge Data
# ====================================================
# Verificamos la Estructura de los Datos, por ejemplo
class(YA_1.10$codmpio)
class(YA_1.10$anno)
class(YA_1.10$partos_atendidos_calificado) # Podemos hacerlo paara cada una de las variables
class(nacidos_vivos$codmpio)
class(nacidos_vivos$anno)
class(nacidos_vivos$nacidos_vivos)
# Cambiamos de String a Numeric
YA_1.10 <- YA_1.10 %>%
mutate(codmpio = as.numeric(codmpio))
YA_1.10 <- YA_1.10 %>%
mutate(anno = as.numeric(anno))
nacidos_vivos <- nacidos_vivos %>%
mutate(codmpio = as.numeric(codmpio))
nacidos_vivos<- nacidos_vivos %>%
mutate(anno = as.numeric(anno))
# Realizamos el Inner Join * Cargamos el DataSet nacidos_vivos
YA_1.10 <- inner_join(nacidos_vivos, YA_1.10, by = c("codmpio","anno"))
# Creamos el Porcentaje de Nacidos Vivos por Personal Calififado
library(tidyr)
library(dplyr)
library(openxlsx)
library(readxl)
library(stringr)
# Vamos a Cargar las Bases de Datos
YA_1.10 <- read.xlsx("/Users/daniel/Documents/GitHub/Ninez-YA/02_RAW-Data/tipo_nacimiento.xlsx" )
nacidos_vivos <- read.xlsx("/Users/daniel/Documents/GitHub/Ninez-YA/03_Process/VF_nacidos_vivos.xlsx")
View(nacidos_vivos)
View(YA_1.10)
library(tidyr)
library(dplyr)
library(openxlsx)
library(readxl)
library(stringr)
# Vamos a Cargar las Bases de Datos
YA_1.10 <- read.xlsx("/Users/daniel/Documents/GitHub/Ninez-YA/02_RAW-Data/tipo_nacimiento.xlsx" )
nacidos_vivos <- read.xlsx("/Users/daniel/Documents/GitHub/Ninez-YA/03_Process/VF_nacidos_vivos.xlsx")
View(YA_1.10)
# Vamos a limpiar el numerador
# Separamos el CODMPIO del Nombre del Municipio
YA_1.10$codmpio <- str_replace(YA_1.10$codmpio, " - .*", "")
# Organizamos la Base de Datos, estos están en Wide, de manera que
# los vamos a convertir a Longer.
YA_1.10 <- YA_1.10 %>%
pivot_longer(
cols = starts_with("20"), # Seleccionamos las columnas que empiezan con "20" (años desde 2000)
names_to = "anno", # Nuevo nombre de columna para los nombres de las columnas originales
values_to = "partos_atendidos_calificado" # Nuevo nombre de columna para los valores
)
# ====================================================
# Sección: Merge Data
# ====================================================
# Verificamos la Estructura de los Datos, por ejemplo
class(YA_1.10$codmpio)
class(YA_1.10$anno)
class(YA_1.10$partos_atendidos_calificado) # Podemos hacerlo paara cada una de las variables
class(nacidos_vivos$codmpio)
class(nacidos_vivos$anno)
class(nacidos_vivos$nacidos_vivos)
# Cambiamos de String a Numeric
YA_1.10 <- YA_1.10 %>%
mutate(codmpio = as.numeric(codmpio))
YA_1.10 <- YA_1.10 %>%
mutate(anno = as.numeric(anno))
nacidos_vivos <- nacidos_vivos %>%
mutate(codmpio = as.numeric(codmpio))
nacidos_vivos<- nacidos_vivos %>%
mutate(anno = as.numeric(anno))
# Realizamos el Inner Join * Cargamos el DataSet nacidos_vivos
YA_1.10 <- inner_join(nacidos_vivos, YA_1.10, by = c("codmpio","anno"))
# Creamos el Porcentaje de Nacidos Vivos por Personal Calififado
YA_1.10 <- YA_1.10 %>%
mutate(porcentaje_nacidos_vivos_personal_calificado = (partos_atendidos_calificado /nacidos_vivos)* 100) # Esto es un porcentaje
View(YA_1.10)
write.xlsx(YA_1.10, "/Users/daniel/Documents/GitHub/Ninez-YA/03_Process/YA_1.10.xlsx", col_names = TRUE)
# Fin del Código
